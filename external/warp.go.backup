/*
package external

import (
	"github.com/ViRb3/wgcf/cloudflare"
	. "github.com/ViRb3/wgcf/cmd/shared"
	"github.com/ViRb3/wgcf/config"
	"github.com/ViRb3/wgcf/wireguard"
	"github.com/daycat/daycatapi/networking"
	"github.com/gin-gonic/gin"
	"github.com/k0kubun/pp/v3"
	"github.com/spf13/viper"
	"os"
)

func GetWarpConfig(c *gin.Context) {
	cfgFile := networking.RandString(6) + ".toml"
	viper.SetConfigFile(cfgFile)
	viper.SetEnvPrefix("WGCF-" + networking.RandString(6))
	viper.AutomaticEnv()
	viper.SetDefault(config.DeviceId, "")
	viper.SetDefault(config.AccessToken, "")
	viper.SetDefault(config.PrivateKey, "")
	viper.SetDefault(config.LicenseKey, "")
	deviceName := networking.RandString(6)
	deviceModel := networking.RandString(6)

	privateKey, err := wireguard.NewPrivateKey()
	if err != nil {
		c.String(500, "Error generating private key")
	}
	device, err := cloudflare.Register(privateKey.Public(), deviceModel)
	if err != nil {
		c.String(500, "Error registering device")
	}

	viper.Set(config.PrivateKey, privateKey.String())
	viper.Set(config.DeviceId, device.Id)
	viper.Set(config.AccessToken, device.Token)
	viper.Set(config.LicenseKey, device.Account.License)
	if err := viper.WriteConfig(); err != nil {
		c.String(500, "Error writing config")
		pp.Print(err)
	}

	ctx := CreateContext()
	_, err = SetDeviceName(ctx, deviceName)
	if err != nil {
		c.String(500, "Error setting device name")
		pp.Print(err)
	}
	thisDevice, err := cloudflare.GetSourceDevice(ctx)
	if err != nil {
		c.String(500, "Error getting source device")
		pp.Print(err)
	}

	boundDevice, err := cloudflare.UpdateSourceBoundDeviceActive(ctx, true)
	if err != nil {
		c.String(500, "Error updating source bound device")
		pp.Print(err)
	}
	if !boundDevice.Active {
		c.String(500, "Error activating device")
	}

	PrintDeviceData(thisDevice, boundDevice)
	c.String(200, "Success")
	os.Remove(cfgFile)

}

/*
privateKey, err := wireguard.NewPrivateKey()
	if err != nil {
		c.String(500, "Error generating private key")
	}
	device, err := cloudflare.Register(privateKey.Public(), "daycatapi")
	if err != nil {
		pp.Print(err)
		c.String(500, "Error binding device")
	}
	pp.Print(device)
	ctx := CreateContext()
	_, err = SetDeviceName(ctx, "daycatapidevice")
	if err != nil {
		pp.Print(err)
		c.String(500, "Error binding device")
	}
	thisDevice, err := cloudflare.GetSourceDevice(ctx)
	if err != nil {
		pp.Print(err)
		c.String(500, "Error binding device")
	}
	boundDevice, err := cloudflare.UpdateSourceBoundDeviceActive(ctx, true)
	if err != nil {
		pp.Print(err)
		c.String(500, "Error binding device")
	}
	PrintDeviceData(thisDevice, boundDevice)
	c.String(200, "ok")
	iptype := c.Query("stack")
    	wgformat := c.Query("format")
    	if iptype == "ipv4" {
    		endpoint := "162.159.192.6"
    	} else if iptype == "ipv6" {
    		endpoint := "[2606:4700:d0::a29f:c006]"
    	}
*/

